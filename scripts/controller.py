import numpy as np
import rospy 
from pure_pursuit.msg import states
from pure_pursuit.msg import input

params ={
        "l" : 2
        }
def getDistance(p1,p2):
    return np.hypot(p1[0]-p2[0],p1[1]-p2[1])

pub = None
def controller(msg):
    global pub
    curr_pos =  [msg.x,msg.y,msg.theta]
    target_pos = [msg.tx,msg.ty]
    dt = get_steering_angle(curr_pos,target_pos)
    pub.publish(input(msg.tv,dt))


# The target point is actually the look ahead point that is generated by the path generation module
def get_steering_angle(curr_pos, target): #State[x,y,theta],target[x,y,vel]
    alpha = np.arctan2(target[1]-curr_pos[1],target[0]-curr_pos[0]) -curr_pos[2]
    ld = getDistance(curr_pos,target)
    #Stering angle formula
    dt = np.arctan2(2*params['l']*np.sin(alpha)/(ld+0.000000001),1.0)
    return dt

 
if __name__ == '__main__':
    try:
        global pub 
    	rospy.init_node("controller")
    	pub = rospy.Publisher("simulation_inputs",input,queue_size=10)
    	rospy.Subscriber("targets",states,controller)
    	rospy.spin()

    except rospy.ROSInterruptException:
        pass